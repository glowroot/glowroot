<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.glowroot</groupId>
    <artifactId>glowroot-parent</artifactId>
    <version>0.14.0-beta</version>
    <relativePath>../../..</relativePath>
  </parent>

  <artifactId>glowroot-agent-core</artifactId>

  <name>Glowroot Agent Core</name>
  <description>Glowroot Agent Core</description>

  <dependencies>
    <dependency>
      <groupId>org.glowroot</groupId>
      <artifactId>glowroot-agent-core-unshaded</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <!-- need to include embedded agent for proguard step, but then it is stripped out after -->
      <groupId>org.glowroot</groupId>
      <artifactId>glowroot-agent-embedded</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <!-- exclusion is needed due to https://issues.apache.org/jira/browse/MSHADE-206 -->
          <groupId>org.glowroot</groupId>
          <artifactId>glowroot-agent-embedded-unshaded</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <!-- optional netty dependency that is required by HttpContentCompressor, need to include in
        core so that it is in bootstrap class loader since netty is -->
      <groupId>com.jcraft</groupId>
      <artifactId>jzlib</artifactId>
      <version>1.1.3</version>
    </dependency>
    <dependency>
      <!-- need to include https support for proguard step, but then it is stripped out after -->
      <groupId>io.netty</groupId>
      <artifactId>netty-tcnative-boringssl-static</artifactId>
      <!-- need to stick to version known to work with gRPC 1.41.0,
        see table at https://github.com/grpc/grpc-java/blob/master/SECURITY.md#netty -->
      <version>2.0.34.Final</version>
    </dependency>
    <dependency>
      <!-- need to include logstash support for proguard step, but then it is stripped out after -->
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>6.3</version>
      <exclusions>
        <exclusion>
          <!-- this is to resolve maven enforcer RequireUpperBoundDeps error -->
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <!-- use LICENSE and NOTICE under src/main/resources -->
        <artifactId>maven-remote-resources-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-shade-plugin</artifactId>
        <configuration>
          <dependencyReducedPomLocation>
            ${project.build.directory}/dependency-reduced-pom.xml
          </dependencyReducedPomLocation>
          <createSourcesJar>true</createSourcesJar>
          <shadeSourcesContent>true</shadeSourcesContent>
          <artifactSet>
            <excludes>
              <!-- don't need these dependencies at runtime since only annotations -->
              <!-- these are transitive dependencies of guava -->
              <exclude>org.checkerframework:checker-qual</exclude>
              <exclude>com.google.errorprone:error_prone_annotations</exclude>
              <exclude>com.google.code.findbugs:jsr305</exclude>
              <!-- these are transitive dependencies of grpc-core -->
              <exclude>com.google.android:annotations</exclude>
              <exclude>org.codehaus.mojo:animal-sniffer-annotations</exclude>
              <!-- these is a transitive dependency of grpc-protobuf -->
              <exclude>com.google.api.grpc:proto-google-common-protos</exclude>
            </excludes>
          </artifactSet>
          <filters>
            <filter>
              <artifact>*:*</artifact>
              <excludes>
                <exclude>META-INF/maven/**</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>com.google.guava:guava</artifact>
              <excludes>
                <exclude>META-INF/beans.xml</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>com.google.protobuf:protobuf-java</artifact>
              <excludes>
                <exclude>google/protobuf/*.proto</exclude>
                <exclude>google/protobuf/compiler/*.proto</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>io.grpc:grpc-netty</artifact>
              <excludes>
                <exclude>META-INF/services/io.grpc.ManagedChannelProvider</exclude>
                <exclude>META-INF/services/io.grpc.ServerProvider</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>io.netty:netty-*</artifact>
              <excludes>
                <exclude>META-INF/io.netty.versions.properties</exclude>
                <exclude>META-INF/native-image/**</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>io.netty:netty-common</artifact>
              <excludes>
                <exclude>META-INF/services/reactor.blockhound.integration.BlockHoundIntegration</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>io.netty:netty-tcnative-boringssl-static</artifact>
              <excludes>
                <exclude>META-INF/license/*</exclude>
                <exclude>META-INF/native/*</exclude>
                <exclude>META-INF/LICENSE.txt</exclude>
                <exclude>META-INF/NOTICE.txt</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>com.fasterxml.jackson.core:jackson-core</artifact>
              <excludes>
                <exclude>META-INF/services/com.fasterxml.jackson.core.JsonFactory</exclude>
                <exclude>META-INF/LICENSE</exclude>
                <exclude>META-INF/NOTICE</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>com.fasterxml.jackson.core:jackson-databind</artifact>
              <excludes>
                <exclude>META-INF/services/com.fasterxml.jackson.core.ObjectCodec</exclude>
                <exclude>META-INF/LICENSE</exclude>
                <exclude>META-INF/NOTICE</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>com.fasterxml.jackson.core:jackson-annotations</artifact>
              <excludes>
                <exclude>META-INF/LICENSE</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>com.fasterxml.jackson.datatype:jackson-datatype-guava</artifact>
              <excludes>
                <exclude>META-INF/services/com.fasterxml.jackson.databind.Module</exclude>
                <exclude>META-INF/LICENSE</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>ch.qos.logback:logback-classic</artifact>
              <excludes>
                <exclude>META-INF/services/javax.servlet.ServletContainerInitializer</exclude>
              </excludes>
            </filter>
            <filter>
              <artifact>net.logstash.logback:logstash-logback-encoder</artifact>
              <excludes>
                <exclude>META-INF/LICENSE.txt</exclude>
                <exclude>META-INF/NOTICE.txt</exclude>
              </excludes>
            </filter>
          </filters>
          <relocations>
            <!-- need to shade glowroot modules so they can be used in glowroot-central without
              conflict, while central itself is being monitored by glowroot-agent -->
            <relocation>
              <pattern>org.glowroot.common</pattern>
              <shadedPattern>org.glowroot.agent.shaded.org.glowroot.common</shadedPattern>
            </relocation>
            <relocation>
              <pattern>org.glowroot.wire.api</pattern>
              <shadedPattern>org.glowroot.agent.shaded.org.glowroot.wire.api</shadedPattern>
            </relocation>
            <relocation>
              <pattern>org.objectweb.asm</pattern>
              <shadedPattern>org.glowroot.agent.shaded.org.objectweb.asm</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google</pattern>
              <shadedPattern>org.glowroot.agent.shaded.com.google</shadedPattern>
            </relocation>
            <relocation>
              <pattern>io.grpc</pattern>
              <shadedPattern>org.glowroot.agent.shaded.io.grpc</shadedPattern>
            </relocation>
            <relocation>
              <!-- environment variable checked in io.grpc.netty.NettyChannelBuilder -->
              <rawString>true</rawString>
              <pattern>^GRPC_PROXY_EXP$</pattern>
              <shadedPattern>GLOWROOT_GRPC_PROXY_EXP</shadedPattern>
            </relocation>
            <relocation>
              <pattern>io.opencensus</pattern>
              <shadedPattern>org.glowroot.agent.shaded.io.opencensus</shadedPattern>
            </relocation>
            <relocation>
              <pattern>io.perfmark</pattern>
              <shadedPattern>org.glowroot.agent.shaded.io.perfmark</shadedPattern>
            </relocation>
            <relocation>
              <pattern>org.HdrHistogram</pattern>
              <shadedPattern>org.glowroot.agent.shaded.org.HdrHistogram</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.fasterxml.jackson</pattern>
              <shadedPattern>org.glowroot.agent.shaded.com.fasterxml.jackson</shadedPattern>
            </relocation>
            <relocation>
              <pattern>io.netty</pattern>
              <shadedPattern>org.glowroot.agent.shaded.io.netty</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.jcraft.jzlib</pattern>
              <shadedPattern>org.glowroot.agent.shaded.com.jcraft.jzlib</shadedPattern>
            </relocation>
            <relocation>
              <!-- this is to shade usage inside of io.grpc.netty.JettyTlsUtil, just in case Jetty
                ALPN happens to be on classpath -->
              <pattern>org.eclipse.jetty.alpn</pattern>
              <shadedPattern>org.glowroot.agent.shaded.org.eclipse.jetty.alpn</shadedPattern>
            </relocation>
            <relocation>
              <!-- this is to shade usage inside of io.grpc.netty.JettyTlsUtil, just in case Jetty
                NPN happens to be on classpath -->
              <pattern>org.eclipse.jetty.npn</pattern>
              <shadedPattern>org.glowroot.agent.shaded.org.eclipse.jetty.npn</shadedPattern>
            </relocation>
            <relocation>
              <pattern>org.slf4j</pattern>
              <shadedPattern>org.glowroot.agent.shaded.org.slf4j</shadedPattern>
            </relocation>
            <relocation>
              <!-- this shades guava's internal use of java util logging which is needed to prevent
                java util logging from being initialized early (e.g. in the case of wildfly which
                wants to do some setup before jul is initialized) -->
              <pattern>java.util.logging</pattern>
              <shadedPattern>org.glowroot.agent.jul</shadedPattern>
              <excludes>
                <!-- don't shade the system property key "java.util.logging.manager" (unshaded
                  string is needed in LazyPlatformMBeanServer) -->
                <exclude>java.util.logging.manager</exclude>
              </excludes>
            </relocation>
            <relocation>
              <pattern>ch.qos.logback</pattern>
              <shadedPattern>org.glowroot.agent.shaded.ch.qos.logback</shadedPattern>
            </relocation>
            <relocation>
              <!-- logback internal constant, see
                ch.qos.logback.classic.util.ContextInitializer -->
              <rawString>true</rawString>
              <pattern>^logback.configurationFile$</pattern>
              <shadedPattern>glowroot.logback.configurationFile</shadedPattern>
            </relocation>
            <relocation>
              <!-- shades logback internal constant, see
                ch.qos.logback.classic.util.ContextInitializer -->
              <rawString>true</rawString>
              <pattern>^logback.groovy$</pattern>
              <shadedPattern>glowroot.logback.groovy</shadedPattern>
            </relocation>
            <relocation>
              <!-- logback internal constant, see ch.qos.logback.classic.ClassicConstants -->
              <rawString>true</rawString>
              <pattern>^logback(-test)?.xml$</pattern>
              <shadedPattern>glowroot.logback$1.xml</shadedPattern>
            </relocation>
            <relocation>
              <!-- logback internal constant, see ch.qos.logback.classic.ClassicConstants -->
              <rawString>true</rawString>
              <pattern>^logback.ContextSelector$</pattern>
              <shadedPattern>glowroot.logback.ContextSelector</shadedPattern>
            </relocation>
            <relocation>
              <!-- logback internal constant, see ch.qos.logback.classic.ClassicConstants -->
              <rawString>true</rawString>
              <pattern>^java:comp/env/logback/configuration-resource$</pattern>
              <shadedPattern>java:comp/env/glowroot.logback/configuration-resource</shadedPattern>
            </relocation>
            <relocation>
              <!-- logback internal constant, see ch.qos.logback.classic.ClassicConstants -->
              <rawString>true</rawString>
              <pattern>^java:comp/env/logback/context-name$</pattern>
              <shadedPattern>java:comp/env/glowroot.logback/context-name</shadedPattern>
            </relocation>
            <relocation>
              <!-- relocating is not totally necessary here, since it is stripped out during the
                assembly step, so could strip out the non-shaded classes, this is just for
                consistency -->
              <pattern>net.logstash.logback</pattern>
              <shadedPattern>org.glowroot.agent.shaded.net.logstash.logback</shadedPattern>
            </relocation>
          </relocations>
          <transformers>
            <transformer
              implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
          </transformers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.wvengen</groupId>
        <artifactId>proguard-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>proguard</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <includeDependency>false</includeDependency>
          <obfuscate>false</obfuscate>
          <options>
            <option>-dontoptimize</option>
            <option>-dontnote **</option>
            <option>-dontwarn **</option>
            <option>
              -keep class !org.glowroot.agent.shaded.**,!org.glowroot.agent.embedded.shaded.**
              { *; }
            </option>
            <option>-keep class org.glowroot.agent.embedded.shaded.org.glowroot.** { *; }</option>
            <option>-keep class org.glowroot.agent.shaded.org.glowroot.common.** { *; }</option>
            <!-- needed by custom collectors -->
            <option>-keep class org.glowroot.agent.shaded.org.glowroot.wire.api.** { *; }</option>
            <!-- even though these classes will be stripped out in assembly plugin below, this will
              retain the netty classes that they depend on -->
            <option>
              -keep class org.glowroot.agent.shaded.io.netty.internal.tcnative.** { *; }
            </option>
            <!-- even though these classes will be stripped out in assembly plugin below, this will
              retain the jackson classes that they depend on -->
            <option>
              -keep class org.glowroot.agent.shaded.net.logstash.logback.** { *; }
            </option>
            <!-- keep all logback appenders -->
            <option>
              -keep class * extends org.glowroot.agent.shaded.ch.qos.logback.** { *; }
            </option>
            <!-- keep special enumeration methods (see "Processing enumeration classes" section at
              http://proguard.sourceforge.net/manual/examples.html) -->
            <option>
              -keepclassmembers,allowoptimization enum * {
              public static **[] values();
              public
              static ** valueOf(java.lang.String);
              }
            </option>
          </options>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>default</id>
            <configuration>
              <!-- maven-shade-plugin changes ${basedir} to point wherever the dependency reduced
                pom is written, see https://issues.apache.org/jira/browse/MSHADE-124,
                so cannot use simple relative path "dist.xml" here -->
              <descriptors>
                <descriptor>${project.build.directory}/../dist.xml</descriptor>
              </descriptors>
              <appendAssemblyId>false</appendAssemblyId>
              <archive>
                <manifestEntries>
                  <Build-Time>${maven.build.timestamp}</Build-Time>
                  <Premain-Class>org.glowroot.agent.AgentPremain</Premain-Class>
                  <Main-Class>org.glowroot.agent.ToolMain</Main-Class>
                  <Can-Redefine-Classes>true</Can-Redefine-Classes>
                  <Can-Retransform-Classes>true</Can-Retransform-Classes>
                </manifestEntries>
              </archive>
            </configuration>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
          <execution>
            <id>sources</id>
            <configuration>
              <!-- maven-shade-plugin changes ${basedir} to point wherever the dependency reduced
                pom is written, see https://issues.apache.org/jira/browse/MSHADE-124,
                so cannot use simple relative path "dist.xml" here -->
              <descriptors>
                <descriptor>${project.build.directory}/../dist-sources.xml</descriptor>
              </descriptors>
            </configuration>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- maven-failsafe-plugin is used to execute JarFileShadingIT since it needs to run after
          the packaging phase so that glowroot-agent-core.jar will be available -->
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
